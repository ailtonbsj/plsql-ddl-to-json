/**
 * 
 *  Testing: Generate YML example from PL/SQL
 * 
*/

import { normalizeDdlJson, sqlDdlOracleToJson } from './plsql-to-json'
import { upperSnakeToCamel, upperSnakeToPascal, upperSnakeToTitle } from './string-util'

function getJavaType(sqlType: string, len: string) {
	const length = parseInt(len);
	if (sqlType === 'VARCHAR2' && length === 1) return 'Character';
	else if (sqlType === 'CHAR') return 'Character';
	else if (sqlType === 'VARCHAR2' && length > 1) return 'String';
	else if (sqlType === 'DATE') return 'LocalDate';
	else if (sqlType === 'NUMBER') return 'Long';
	else  return 'Object';
}

function getUI(sqlType: string, len: string) {
	const length = parseInt(len);
	if (sqlType === 'VARCHAR2' && length === 1) return 'slidetoggle';
	else if (sqlType === 'CHAR') return 'slidetoggle';
	else if (sqlType === 'VARCHAR2' && length > 1) return 'inputtext';
	else if (sqlType === 'DATE') return 'inputdate';
	else if (sqlType === 'NUMBER') return 'inputnumber';
	else return 'none';
}

function printYml(normObj: object) {
	Object.values(normObj)
		.sort((a: any, b: any) => {
			if(a.key && !b.key) return -1;
			if(!a.key && b.key) return 1;
			return 0;
		}).map(col => {
		console.log('- property: ' + upperSnakeToCamel(col.column));
		console.log('  column: ' + col.column);
		console.log('  javaType: ' + getJavaType(col.type, col.len));
		console.log('  uiComponent: ' + getUI(col.type, col.len));
		console.log('  label: ' + upperSnakeToTitle(col.column));
		console.log('  key: ' + col.key);
		console.log('  nullable: ' + col.nullable);
		console.log('  search: true');
		if (col.targetClass !== undefined) {
			console.log('  # targetClass: ' + upperSnakeToPascal(col.targetClass.split('.')[1]));
			console.log('  # targetProperty: ' + upperSnakeToCamel(col.targetProperty));
		}
		console.log();
	});
}

const sqlUser = `
-- MULTIDB.USERS definition

-- DDL generated by DBeaver
-- WARNING: It may differ from actual native database DDL

-- Drop table

-- DROP TABLE MULTIDB.USERS;

CREATE TABLE MULTIDB.USERS (    
    username      VARCHAR2(255) NOT NULL,
    created_at    DATE NOT NULL,
    password      VARCHAR2(255) NOT NULL,
    is_active     NUMBER(1) DEFAULT 1 NOT NULL,
    department_id NUMBER(19) NULL,
    profile_id    NUMBER(19) NULL,
    CONSTRAINT pk_users PRIMARY KEY (username, created_at)
);
`;

const sqlSession = `
CREATE TABLE MULTIDB.ACTIVE_SESSION (
    user_created_at  DATE NOT NULL,
	device           VARCHAR2(255) NULL,
	agent            VARCHAR2(255) NULL,
	signed_in        DATE NULL,
    user_id       VARCHAR2(255) NOT NULL,
	CONSTRAINT pk_sessions PRIMARY KEY (user_id, user_created_at, device),
	CONSTRAINT fk_users_session FOREIGN KEY (user_created_at) REFERENCES MULTIDB.USERS(username, created_at)
);
`;

console.log("#--- User ---");
const jsonUser = sqlDdlOracleToJson(sqlUser);
const normUser = normalizeDdlJson(jsonUser);
printYml(normUser);

console.log("#--- Session ---");
const jsonSession = sqlDdlOracleToJson(sqlSession);
const normSession = normalizeDdlJson(jsonSession);
printYml(normSession);
